0.加急-先看spring源码+java类加载+注册中心原理+互联网项目
spring系列
  https://ifeve.com/spring-interview-questions-and-answers/
  https://segmentfault.com/a/1190000020689625?utm_source=sf-similar-article

spring bean 生命周期   https://segmentfault.com/a/1190000013875943?utm_source=sf-similar-article
  1.Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。
     非单例的bean在springboot启动时不会创建
  Bean 的生命周期
  1.Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化
  2.Bean实例化后对将Bean属性注入值（3-9可以对Bean属性注入值）
  3.如果Bean实现了BeanNameAware接口的话，Spring将调用setBeanName()方法，将Bean的id 传进来
  4.如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传进来
  5.如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传进来。
  6.如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的BeanPostProcessor.postProcessBeforeInitialization()方法
  7.如果Bean中方法标注注解@PostConstruct，就执行该方法
  8.如果Bean 实现了InitializingBean接口，Spring将调用他们的InitializingBean.afterPropertiesSet()方法。同时，如果bean使用init-method声明了初始化方法，该方法也会被调用
  9.如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的BeanPostProcessor.postProcessAfterInitialization()方法。
  10.这时Bean已经准备创建完成了。他们将一直存在应用上下文中，直到应用上下文被销毁。（程序执行，业务逻辑调用）
  11.如果Bean中方法标注注解@PreDestroy，就执行该方法
  12.如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法
  13.如果bean使用了destory-method 声明销毁方法，该方法也会被调用。

spring 循环依赖  https://segmentfault.com/a/1190000039091691?utm_source=sf-similar-article
   1.构造注入的方式，无法解决循环依赖，只有构造注入不可以解决，其他两种注入都能。
   2.Spring 如何使用三级缓存来解决循环依赖的（只有构造注入不可以解决），
    三级缓存分别是：
     singletonObjects： 一级缓存，存储单例对象，Bean 已经实例化，初始化完成。
     earlySingletonObjects： 二级缓存，存储 singletonObject，这个 Bean 实例化了，还没有初始化。
     singletonFactories： 三级缓存，存储 singletonFactory。

     三级缓存解决循环依赖的源码的核心方法及属性：


   3.循环依赖和代理之间的关系是什么？
     比如 @Transactional 和 @Async 注解会对循环依赖产生什么影响？ https://blog.csdn.net/luoyang_java/article/details/105835112
       @Async会导致spring无法解决循环依赖，
         解决方案：1.不要让@Async的Bean参与循环依赖
                   2.在启动类加上@ComponentScan(lazyInit = true) ,在依赖注入字段处加上@Lazy(与@Autowired同一地方)
                   3.把allowRawInjectionDespiteWrapping设置为true
                         @Component
                         public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor {
                             @Override
                             public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
                                 ((AbstractAutowireCapableBeanFactory) beanFactory).setAllowRawInjectionDespiteWrapping(true);
                             }
                         }
       @Transactional无影响
     为什么要用三级缓存？二级缓存不可以么？  https://blog.csdn.net/weixin_45727359/article/details/114696668
       因为是代理对象aop时必须用到二级缓存，不然代理对象无法保证单例（再执行一遍singleFactory.getObject()方法会产生一个新的代理对象）
       所以如果没有AOP的话确实可以两级缓存就可以解决循环依赖的问题，
       如果加上AOP，两级缓存是无法解决的，不可能每次执行singleFactory.getObject()方法都给我产生一个新的代理对象，所以还要借助另外一个缓存来保存产生的代理对象


   4.循环依赖可能出现的异常BeanCurrentlyInCreationException,UnsatisfiedDependencyException



spring  aop   https://www.cnblogs.com/hongwz/p/5764917.html
   事务，日志（自定义注解EnableAop+@Aspect+@Slf4j+logback.xml的联合使用，demo里已有例子）
   jdk动态代理 与 CGLib代理的区别？ https://www.cnblogs.com/sandaman2019/p/12636727.html
    service接口+serviceImpl实现类模式默认使用jdk动态代理，
    注入是只能注入接口，要注解实现类就必须通过在 @EnableAsync 和/或 @EnableCaching 上设置 proxyTargetClass=true 来强制使用基于 CGLib动态代理

spring ioc 依赖注入的三种方式，优缺点  https://www.cnblogs.com/joemsu/p/7688307.html  原理：底层用反射实现
使用构造器注入的好处：（spring4.x推荐）
 保证依赖不可变（final关键字）
 保证依赖不为空（省去了我们对其检查）
 保证返回客户端（调用）的代码的时候是完全初始化的状态
 避免了循环依赖
 提升了代码的可复用性
 另外，当有一个依赖有多个实现的使用，推荐使用field注入或者setter注入的方式来指定注入的类型。

mysql数据库表设计 + 数据连接url    https://www.cnblogs.com/soft2018/p/10879760.html
  例如:jdbc:mysql://172.16.4.50:3306/syy_standard_consult_local?allowMultiQueries=true&autoReconnect=true&useSSL=false&characterEncoding=utf-8
  ?后面的参数的了解

设计模式


注册中心实现原理


java类加载  synchronized的实现原理


redis集群及基础


elasticSearch的学习


jvm


3-5月复习过的面试题+中大教务系统


